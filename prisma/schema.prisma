// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                Int      @id @default(autoincrement())
  phone             String?  @unique
  email             String?  @unique
  firstName         String
  lastName          String
  avatar            String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  tokens            Token[]
  items             Item[]
  wishLists         WishList[]
  salesList         SalesList[]
  purchasedHistory  PurchasedHistory[]
  posts             Post[]
  comments          Comment[]
  likeComments      LikeComment[]
  writtenReviews    Review[] @relation(name: "writtenReviews")
  receivedReviews   Review[] @relation(name: "receivedReviews")
  messages          Message[]
  streams           Stream[]



  @@index([phone])
  @@index([email])
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  

  @@index([userId])
  @@index([payload]) // Added an index on 'payload' for faster lookups
} 

model Item {
  id                Int      @id @default(autoincrement())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  image             String
  name              String
  price             Int
  description       String   @db.MediumText
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  wishList          WishList[]
  salesList         SalesList[]
  purchasedHistory  PurchasedHistory[]

  @@index([userId])
  // @@index([payload]) // Added an index on 'payload' for faster lookups 
}

model Post {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  question      String      @db.MediumText
  latitude      Float?
  longitude     Float?
  comments      Comment[]
  likeComment   LikeComment[]



  @@index([userId])
}

model Comment {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        Int
  commentText   String   @db.MediumText
  

  @@index([userId])
  @@index([postId])
}

model LikeComment {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        Int

  @@index([postId])
  @@index([userId])
}

model Review {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  review        String   @db.MediumText
  createdBy     User     @relation(name:"writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById   Int
  createdFor    User     @relation(name:"receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId  Int
  score         Int      @default(1)

  @@index([createdById])
  @@index([createdForId])
}

model WishList {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId])
  @@index([userId])
}

model SalesList {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId])
  @@index([userId])
}

model PurchasedHistory {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId])
  @@index([userId])
}

model Stream {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   
  description String   @db.MediumText
  price       Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  messages    Message[]

  @@index([userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  message   String   @db.MediumText
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int


  @@index([userId])
  @@index([streamId])
}