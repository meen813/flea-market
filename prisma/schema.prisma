// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            Int      @id @default(autoincrement())
  phone         String?  @unique
  email         String?  @unique
  firstName     String
  lastName      String
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tokens        Token[]
  items         Item[]
  wishLists     WishList[]
  posts         Post[]
  comments      Comment[]
  likeComments  LikeComment[]


  @@index([phone])
  @@index([email])
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  

  @@index([userId])
  @@index([payload]) // Added an index on 'payload' for faster lookups
} 

model Item {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String   @db.MediumText
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  wishList    WishList[]

  @@index([userId])
  // @@index([payload]) // Added an index on 'payload' for faster lookups 
}

model WishList {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId])
  @@index([userId])
}

model Post {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  question      String   @db.MediumText
  comments      Comment[]
  likeComments  LikeComment[]


  @@index([userId])
}

model Comment {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        Int
  commentText   String   @db.MediumText
  

  @@index([userId])
  @@index([postId])
}

model LikeComment {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        Int
  commentText   String   @db.MediumText

  @@index([postId])
  @@index([userId])
}
